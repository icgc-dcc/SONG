version: '3.4'
services:
  base-ubuntu:
    build: ./song-docker-demo/base-ubuntu
  base-db:
    build: ./song-docker-demo/base-db
    command: echo "do nothing"
  db:
    image: "postgres:9.6"
    network_mode: host
    environment:
      PGPORT: 8082
      POSTGRES_DB: song
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
  ego-api:
    image: "overture/ego:latest"
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://ego-postgres:5432/ego?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES: demo, auth
    expose:
      - "8080"
    ports:
      - "8084:8080"
    command: java -jar /srv/ego/install/ego.jar
    depends_on:
      - ego-postgres
  ego-postgres:
    image: postgres:9.5
    environment:
      - POSTGRES_DB=ego
      - POSTGRES_PASSWORD=password
    expose:
      - "5432"
    volumes:
      - "./song-docker-demo/ego:/docker-entrypoint-initdb.d"
    ports:
      - "9444:5432"
  server:
    build:
      context: ./
      dockerfile: Dockerfile
      target: server
    network_mode: host
    environment:
      SERVER_PORT: 8080
      AUTH_SERVER_URL: http://localhost:8084/o/check_token/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_PREFIX: song
      AUTH_SERVER_SUFFIX: WRITE
      SCORE_URL: http://localhost:8087
      SCORE_ACCESSTOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      MANAGEMENT_SERVER_PORT: 8081
      ID_REALIDS: "false"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:8082/song?stringtype=unspecified
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:db/migration"
    restart: always
    depends_on:
      - db 
      - id
      - ego-api
    volumes:
      - "./song-docker-demo/logs/server_logs:/opt/dcc/server_logs"
      - "./song-docker-demo/tools:/opt/dcc/tools"
  client:
    build:
      context: ./
      dockerfile: Dockerfile
      target: client
    network_mode: host
    environment:
      AUTH_TOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      SERVER_URL: http://localhost:8080
      CLIENT_STUDY_ID: ABC123
      CLIENT_DEBUG_ENABLED: "false"
    depends_on:
      - base-ubuntu
      - server
    volumes:
      - "./song-docker-demo/data/client:/opt/dcc/data"
      - "./song-docker-demo/tools:/opt/dcc/tools"
  object-storage:
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    network_mode: host
    volumes:
      - "./song-docker-demo/data/minio:/opt/dcc/data"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_PORT: 8085
    deploy:
        restart_policy:
            delay: 10s
            max_attempts: 10
            window: 60s
    command: server --address=0.0.0.0:8085 /opt/dcc/data
  storage-server:
    build: ./song-docker-demo/storage-server
    network_mode: host
    environment:
      OBJECT_STORAGE_URL: http://localhost:8085
      OBJECT_STORAGE_ACCESS_KEY: minio
      OBJECT_STORAGE_SECRET_KEY: minio123
      AUTH_SERVER_URL: http://localhost:8084/o/check_token/
      AUTH_SERVER_CLIENTID:  score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_UPLOADSCOPE: score.WRITE
      AUTH_SERVER_DOWNLOADSCOPE: score.READ
      SERVER_URL: http://localhost:8080
      STORAGE_SERVER_PORT: 8087
      STORAGE_SERVER_JMX_PORT: 10018
      STORAGE_SERVER_DATA_BUCKET: oicr.icgc.test
      STORAGE_SERVER_STATE_BUCKET: oicr.icgc.test
      STORAGE_SERVER_DATA_DIR: data
      STORAGE_SERVER_OBJECT_SENTINEL: heliograph
    depends_on:
      - base-ubuntu
      - object-storage
      - server
      - ego-api
    volumes:
      - "./song-docker-demo/logs/storage_server_logs:/opt/dcc/storage_server_logs"
      - "./song-docker-demo/tools:/opt/dcc/tools"
      - "./song-docker-demo/data:/opt/dcc/data"
  storage-client:
    build: ./song-docker-demo/storage-client
    environment:
      AUTH_TOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      SERVER_URL: http://localhost:8080
      STORAGE_SERVER_URL: http://localhost:8087
    depends_on:
      - storage-server
      - server
    volumes:
      - "./song-docker-demo/data/storage-client:/opt/dcc/data"
      - "./song-docker-demo/tools:/opt/dcc/tools"

volumes:
    db-data: {}
    id-db-data: {}
