# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8u151-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/postgres
        environment:
        - POSTGRES_USER: circleci
        - POSTGRES_DB: test_db

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: sudo apt update && sudo apt install postgresql-client
      #- run: sudo -u postgres psql -p 5432 -c "create user ubuntu with password 'ubuntu';"
      #- run: sudo -u postgres psql -p 5432 -c "alter user ubuntu with superuser;"
      #- run: sudo -u postgres psql -p 5432 -c "create database test_db;"

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
        
      # run tests!
      #- run: mvn integration-test

      # build
      - run: mvn clean package

  build_client:
    docker:
      - image: circleci/golang:1.11.2
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build for all platforms
          command: |
            cd song-go-client
            for GOOS in darwin linux windows; do
              for GOARCH in 386 amd64; do
                if [[ $GOOS == windows ]]; then
                  suffix='.exe'
                else suffix=''
                fi
                go build -v -o binaries/song-go-client-$GOOS-${GOARCH}${suffix}
              done
            done
      - run:
          name: Test
          command: |
            cd song-go-client
            go test github.com/overture-stack/SONG/song-go-client/song -v
      - store_artifacts:
          path: ~/repo/song-go-client/binaries
          destination: song-go-client

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - build_client


